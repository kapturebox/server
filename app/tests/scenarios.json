{
  "scenarioVersion": "1.1",
  "name": "Main Functionality",
  "settings": {
    "testing": {
      "oas2": []
    }
  },
  "before": {
    "settings": {
      "name": "Ensure settings are set properly",
      "description": "Tests some basic settings stuff, and ensures that last step allows for all sources to be enabled properly",
      "steps": [
        {
          "type": "http",
          "name": "Get settings",
          "input": {
            "method": "get",
            "url": "{$.env.host}/api/v1/settings"
          },
          "after": {
            "assertions": [
              {
                "target": "output.status",
                "op": "eq",
                "expected": 200
              },
              {
                "target": "output.body.downloadPaths",
                "op": "exists"
              }
            ],
            "transforms": [
              {
                "target": "$.ctx.settings",
                "source": "output.body"
              }
            ]
          }
        },
        {
          "type": "http",
          "name": "Change all settings to something silly",
          "input": {
            "method": "put",
            "url": "{$.env.host}/api/v1/settings",
            "headers": {
              "Content-Type": "application/json"
            },
            "body": "{$.ctx.badSettings}"
          },
          "before": {
            "script": "\n$.ctx.set('badSettings', {\n  downloadPaths: {},\n  plugins: {},\n  system: {\n    name: \"woohoo\"\n  },\n  userInfo: {}\n});  \n"
          },
          "after": {
            "script": "const mergedSettings = _.merge($.ctx.get('settings'), $.ctx.get('badSettings'));\n\n\ntests['bad config comes back'] = _.isEqual(output.body.get(), mergedSettings);"
          }
        },
        {
          "type": "http",
          "name": "Re-enable the previous settings via PUT",
          "input": {
            "method": "put",
            "url": "{$.env.host}/api/v1/settings",
            "body": "{$.ctx.settings}"
          }
        },
        {
          "type": "http",
          "name": "Update settings to enable proper plugins for test runs",
          "input": {
            "method": "patch",
            "url": "{$.env.host}/api/v1/settings",
            "body": "{\n\t\"plugins\": {\n  \t\"com_flexget\": {\n      \"enabled\": true\n    },\n  \t\"com_kapture_url\": {\n      \"enabled\": true\n    },\n  \t\"com_piratebay\": {\n      \"enabled\": true\n    },\n  \t\"com_transmissionbt\": {\n      \"enabled\": true\n    },\n  \t\"com_youtube\": {\n      \"enabled\": true\n    },\n  \t\"info_showrss\": {\n      \"enabled\": true\n    },\n  \t\"tv_trakt\": {\n      \"enabled\": true\n    }\n  }\n}",
            "headers": {
              "Content-Type": "application/json"
            }
          },
          "before": {},
          "after": {
            "assertions": [
              {
                "target": "output.status",
                "op": "eq",
                "expected": 202
              }
            ],
            "script": "const enabledKeys = [\n  'plugins.com_flexget.enabled',\n  'plugins.com_kapture_url.enabled',\n  'plugins.com_piratebay.enabled',\n  'plugins.com_transmissionbt.enabled',\n  'plugins.com_youtube.enabled',\n  'plugins.info_showrss.enabled',\n  'plugins.tv_trakt.enabled'\n];\n\nenabledKeys.forEach(function (k) {\n  tests[k + ' is enabled'] = output.body.get(k) === true;\n});\n"
          }
        }
      ]
    }
  },
  "scenarios": {
    "series": {
      "name": "Verify series functionality works",
      "steps": [
        {
          "type": "http",
          "name": "Search for \"sunny\" with series filter",
          "input": {
            "method": "get",
            "url": "{$$.env.host}/api/v1/search",
            "query": {
              "q": "sunny",
              "filter": "mediaType:series"
            },
            "headers": {
              "": ""
            }
          },
          "after": {
            "transforms": [
              {
                "target": "$.ctx.id",
                "source": "output.body[0].id"
              },
              {
                "target": "$.ctx.slug",
                "source": "output.body[0].slug"
              },
              {
                "target": "$.ctx.sourceId",
                "source": "output.body[0].sourceId"
              },
              {
                "target": "$.ctx.downloadMechanism",
                "source": "output.body[0].downloadMechanism"
              }
            ],
            "assertions": [
              {
                "target": "output.status",
                "op": "eq",
                "expected": 200
              }
            ],
            "script": "var bdy = output.body.get();\n\ntests['1 entry in response'] = bdy.length === 1\ntests['title is always sunny'] = bdy[0].title === \"It's Always Sunny in Philadelphia\""
          }
        },
        {
          "type": "http",
          "name": "Add sunny to download via \"source\" method",
          "input": {
            "method": "post",
            "url": "{$.env.host}/api/v1/downloads/source:{$.ctx.sourceId}/{$.ctx.id}"
          },
          "after": {
            "assertions": [
              {
                "target": "output.status",
                "op": "eq",
                "expected": 200
              },
              {
                "target": "output.body.id",
                "op": "eq",
                "expected": "{$.ctx.id}"
              }
            ],
            "script": "const bdy = output.body.get();\n\ntests['seen has length > 0'] = Array.isArray(bdy.seen) && bdy.seen.length > 0"
          }
        },
        {
          "type": "http",
          "name": "Add sunny via \"method\" method",
          "input": {
            "method": "post",
            "url": "{$.env.host}/api/v1/downloads/method:{$.ctx.downloadMechanism}/{$.ctx.slug}"
          }
        },
        {
          "type": "http",
          "name": "Get info about show requested",
          "input": {
            "method": "get",
            "url": "{$.env.host}/api/v1/series/{$.ctx.sourceId}/{$.ctx.id}"
          },
          "after": {
            "assertions": [
              {
                "target": "output.body.id",
                "op": "eq",
                "expected": "{$.ctx.id}"
              }
            ]
          }
        },
        {
          "type": "http",
          "name": "Ensure that the /series endpoint returns this entry",
          "input": {
            "method": "get",
            "url": "{$.env.host}/api/v1/series"
          },
          "after": {
            "assertions": [
              {
                "target": "output.status",
                "op": "eq",
                "expected": 200
              },
              {
                "target": "output.body[0].id",
                "op": "eq",
                "expected": "{$.ctx.id}"
              },
              {
                "target": "output.body",
                "op": "length",
                "expected": 1
              }
            ]
          }
        },
        {
          "type": "http",
          "name": "Delete series from autokapture",
          "input": {
            "method": "delete",
            "url": "{$.env.host}/api/v1/series/{$.ctx.sourceId}/{$.ctx.id}"
          }
        }
      ]
    },
    "trending": {
      "name": "Verify trending functionality",
      "steps": [
        {
          "type": "http",
          "name": "Get trending list",
          "input": {
            "method": "get",
            "url": "{$.env.host}/api/v1/trending"
          },
          "after": {
            "script": "tests['movies list > 0'] = output.body.get('movies').length > 0\ntests['series list > 0'] = output.body.get('series').length > 0\n",
            "transforms": [
              {
                "target": "$.ctx.movieEntry",
                "source": "output.body.movies[0]"
              },
              {
                "target": "$.ctx.seriesEntry",
                "source": "output.body.series[0]"
              }
            ]
          }
        },
        {
          "type": "http",
          "name": "Get info for top movie",
          "input": {
            "method": "get",
            "url": "{$.env.host}/api/v1/trending/{$.ctx.movieEntry.sourceId}/info/{$.ctx.movieEntry.id}"
          },
          "after": {
            "assertions": [
              {
                "target": "output.status",
                "op": "eq",
                "expected": 200
              },
              {
                "target": "output.body.title",
                "op": "exists"
              }
            ]
          }
        }
      ]
    },
    "downloads": {
      "name": "Verify download functionality",
      "description": "Verifies that we can search, get an ad-hoc download, and see it progress",
      "steps": [
        {
          "type": "http",
          "name": "Verify there are 0 downloads",
          "input": {
            "method": "get",
            "url": "{$.env.host}/api/v1/downloads"
          },
          "after": {
            "assertions": [
              {
                "target": "output.body",
                "op": "exists"
              }
            ],
            "script": "tests['verify list is empty'] = output.body.get().length === 0;"
          }
        },
        {
          "type": "http",
          "name": "Search and capture some results",
          "input": {
            "method": "get",
            "url": "{$.env.host}/api/v1/search",
            "query": {
              "q": "happy"
            }
          },
          "after": {
            "script": "const bdy = output.body.get();\n\nconst yt = _.filter(bdy, {sourceId: 'com_youtube'});\nconst tpb = _.filter(bdy, {sourceId: 'com_piratebay'});\n\ntests['youtube results > 0'] = yt.length > 0;\ntests['tpb results > 0'] = tpb.length > 0;\n\n$.ctx.set('yt', yt[0]);\n$.ctx.set('tpb', tpb[0]);\n"
          }
        },
        {
          "type": "http",
          "name": "Start download from youtube via method",
          "input": {
            "method": "post",
            "url": "{$.env.host}/api/v1/downloads/method:{$.ctx.yt.downloadMechanism}/{$.ctx.yt.slug}"
          }
        },
        {
          "type": "http",
          "name": "Start download from tpb via method",
          "input": {
            "method": "post",
            "url": "{$.env.host}/api/v1/downloads/method:{$.ctx.tpb.downloadMechanism}/{$.ctx.tpb.slug}",
            "query": {
              "where": "{$.ctx.tpb.mediaType}"
            }
          }
        },
        {
          "type": "http",
          "name": "Verify there are 2 downloads",
          "input": {
            "method": "get",
            "url": "{$.env.host}/api/v1/downloads"
          },
          "after": {
            "assertions": [
              {
                "target": "output.body",
                "op": "exists"
              }
            ],
            "script": "tests['verify list has 2 download entries'] = output.body.get().length === 2;\n\n$.ctx.set('todelete', output.body.get().map(function(e) {\n  return e.id;\n}));"
          },
          "before": {
            "script": "SL.sleep(5000)"
          }
        },
        {
          "type": "http",
          "name": "Delete download 1",
          "input": {
            "method": "delete",
            "url": "{$.env.host}/api/v1/downloads/{$.ctx.todelete[0]}",
            "query": {
              "fromDisk": "true"
            }
          }
        },
        {
          "type": "http",
          "name": "Delete download 2",
          "input": {
            "method": "delete",
            "url": "{$.env.host}/api/v1/downloads/{$.ctx.todelete[1]}",
            "query": {
              "fromDisk": "true"
            }
          }
        },
        {
          "type": "http",
          "name": "Start download from youtube via source",
          "input": {
            "method": "post",
            "url": "{$.env.host}/api/v1/downloads/source:{$.ctx.yt.sourceId}/{$.ctx.yt.id}"
          }
        },
        {
          "type": "http",
          "name": "Start download from tpb via source",
          "input": {
            "method": "post",
            "url": "{$.env.host}/api/v1/downloads/source:{$.ctx.tpb.sourceId}/{$.ctx.tpb.id}"
          }
        },
        {
          "type": "http",
          "name": "Verify there are 2 downloads",
          "input": {
            "method": "get",
            "url": "{$.env.host}/api/v1/downloads"
          },
          "after": {
            "assertions": [
              {
                "target": "output.body",
                "op": "exists"
              }
            ],
            "script": "tests['verify list has 2 download entries'] = output.body.get().length === 2;\n\n$.ctx.set('todelete', output.body.get().map(function(e) {\n  return e.id;\n}));"
          },
          "before": {
            "script": "SL.sleep(5000)"
          }
        },
        {
          "type": "http",
          "name": "Delete download 3",
          "input": {
            "method": "delete",
            "url": "{$.env.host}/api/v1/downloads/{$.ctx.todelete[0]}",
            "query": {
              "fromDisk": "true"
            }
          }
        },
        {
          "type": "http",
          "name": "Delete download 4",
          "input": {
            "method": "delete",
            "url": "{$.env.host}/api/v1/downloads/{$.ctx.todelete[1]}",
            "query": {
              "fromDisk": "true"
            }
          }
        }
      ]
    }
  },
  "utilities": {},
  "after": {
    "url": {
      "name": "Verify URL functionality",
      "steps": [
        {
          "type": "http",
          "input": {
            "method": "post",
            "url": "{$.env.host}/api/v1/downloads/method:url/{$.ctx.videoUrl}"
          },
          "name": "Try video file",
          "before": {
            "script": "const videoUrl = \"http://kapturebox.com/video/explainer.webm\"; // video/webm\nconst imageUrl = \"http://kapturebox.com/img/logo2.png\"; // image/png\nconst musicUrl = \"https://freemusicarchive.org/music/download/62ae36da26642672bdc9f2e822a09cf3050cd4ac\"; // audio/mpeg\n\nconst videoUrlEnc = Buffer.from(videoUrl).toString('base64');\nconst imageUrlEnc = Buffer.from(imageUrl).toString('base64');\nconst musicUrlEnc = Buffer.from(musicUrl).toString('base64');\n\n$.ctx.set('videoUrl', videoUrlEnc);\n$.ctx.set('imageUrl', imageUrlEnc);\n$.ctx.set('musicUrl', musicUrlEnc);"
          },
          "after": {
            "assertions": [
              {
                "target": "output.status",
                "op": "eq",
                "expected": 200
              },
              {
                "target": "output.body.destName",
                "op": "eq",
                "expected": "movies"
              },
              {
                "target": "output.body.contentType",
                "op": "eq",
                "expected": "video/webm"
              }
            ]
          }
        },
        {
          "type": "http",
          "input": {
            "method": "post",
            "url": "{$.env.host}/api/v1/downloads/method:url/{$.ctx.videoUrl}",
            "query": {
              "where": "tvshows"
            }
          },
          "name": "Try video file with dest override",
          "before": {},
          "after": {
            "assertions": [
              {
                "target": "output.status",
                "op": "eq",
                "expected": 200
              },
              {
                "target": "output.body.destName",
                "op": "eq",
                "expected": "tvshows"
              },
              {
                "target": "output.body.contentType",
                "op": "eq",
                "expected": "video/webm"
              },
              {
                "target": "output.body.fullDestPath",
                "op": "contains",
                "expected": "/tvshows/"
              }
            ]
          }
        },
        {
          "type": "http",
          "input": {
            "method": "post",
            "url": "{$.env.host}/api/v1/downloads/method:url/{$.ctx.imageUrl}"
          },
          "name": "Try image file",
          "before": {},
          "after": {
            "assertions": [
              {
                "target": "output.status",
                "op": "eq",
                "expected": 200
              },
              {
                "target": "output.body.destName",
                "op": "eq",
                "expected": "photos"
              },
              {
                "target": "output.body.fullDestPath",
                "op": "contains",
                "expected": "/photos/"
              },
              {
                "target": "output.body.contentType",
                "op": "eq",
                "expected": "image/png"
              }
            ]
          }
        },
        {
          "type": "http",
          "input": {
            "method": "post",
            "url": "{$.env.host}/api/v1/downloads/method:url/{$.ctx.musicUrl}"
          },
          "name": "Try music file",
          "before": {},
          "after": {
            "assertions": [
              {
                "target": "output.status",
                "op": "eq",
                "expected": 200
              },
              {
                "target": "output.body.destName",
                "op": "eq",
                "expected": "music"
              },
              {
                "target": "output.body.contentType",
                "op": "eq",
                "expected": "audio/mpeg"
              },
              {
                "target": "output.body.fullDestPath",
                "op": "contains",
                "expected": "/music/"
              }
            ]
          }
        },
        {
          "type": "http",
          "name": "Make sure downloads exist",
          "input": {
            "method": "get",
            "url": "{$.env.host}/api/v1/downloads"
          },
          "after": {
            "assertions": [
              {
                "target": "output.status",
                "op": "eq",
                "expected": 200
              },
              {
                "target": "output.body",
                "op": "length",
                "expected": 4
              }
            ],
            "script": "const bdy = output.body.get();\nconst ids = bdy.map(function(e) {return e.id});\n\n$.ctx.set('todelete', ids);"
          },
          "before": {
            "script": "SL.sleep(10000);"
          }
        },
        {
          "type": "http",
          "name": "Remove download 1",
          "input": {
            "method": "delete",
            "url": "{$.env.host}/api/v1/downloads/{$.ctx.todelete[0]}"
          }
        },
        {
          "type": "http",
          "name": "Remove download 2",
          "input": {
            "method": "delete",
            "url": "{$.env.host}/api/v1/downloads/{$.ctx.todelete[1]}"
          }
        },
        {
          "type": "http",
          "name": "Remove download 3",
          "input": {
            "method": "delete",
            "url": "{$.env.host}/api/v1/downloads/{$.ctx.todelete[2]}"
          }
        },
        {
          "type": "http",
          "name": "Remove download 4",
          "input": {
            "method": "delete",
            "url": "{$.env.host}/api/v1/downloads/{$.ctx.todelete[3]}"
          }
        }
      ],
      "description": "Checks that the url plugin works"
    }
  }
}
